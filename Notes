一.NodeJS概述
	基于谷歌V8引擎，运行在服务器端的环境
	
	对比JS和NodeJS
	1.JS运行在浏览器端，存在存储多种浏览器，容易产生兼容性问题；而NodeJS运行在服务器端，，只有V8引擎一种解释器，不存在兼容性问题。
	2.两者都有内置对象、自定义对象、宿主对象(不相同)
	3.JS用于浏览器的交互效果，NodeJS用于服务器端操作，例如创建web服务器、操作数据库、文件操作
	
	NodeJS执行方式
	脚本模式	node	c:/xampp/.../01.js	回车
	交互模式	node	回车		进入交互模式
		退出交互模式	两次Ctrl+C	或者	.exit
	
	NodeJS API
	nodejs.cn	nodejs.org
	
	默认单线程逻辑处理	非阻塞的异步I/O处理---I/O	输入输出
	
	NodeJS适用场景
	基于社交网络的大规模web应用(属于I/O密集型)
	
二.全局对象
	1.NodeJS:global
	在交互模式下，声明的变量和创建函数都属于全局对象下的，可以使用global来访问	global.a	global.fn()
	在脚本模式下，声明的变量和创建函数都不属于全局对象下的，不能使用global来访问
	JS：window
	在JS脚本中声明的变量和创建的函数都属于全局对象下的，可以使用window访问window.a	window.fn()
	2.process对象(也是全局对象)	
	进程:执行程序的时候，操作系统分配内存空间
	process.arch	查看当前CPU架构
	process.platform	查看当前的操作系统
	process.env		查看当前的环境变量有哪些			环境变量才可以在cmd中运行
	process.version	查看当前NodeJS版本号
	process.pid		查看当前进程编号
	process.kill	结束某个编号的进程
	3.console对象
	标准输出
	console.log()	打印日志
	console.info()	打印消息
	console.warn()	打印警告
	console.error()	打印错误
	console.time('自定义字符串')			开始计时
	console.timeEnd('自定义字符串')		结束计时		注意：开始计时和结束计时的字符串保持一致
	4.Buffer对象
	缓冲区：在内存中存储数据的区域，常用语网络传输时的资源
	创建Buffer
	var buf=Buffer.alloc(5,'abc=de')
	将Buffer数据转为字符串
	String(buf)
	buf.toString()
	5.模块
	模块：就是一个独立的功能体
	在NodeJS下，模块分为三大类：自定义模块、核心模块、第三方模块
	自定义模块
	在NodeJS下，每一个文件都是一个模块
	
	NodeJS自动为每个文件添加了构造函数，所有的代码被构造函数所包含
	(function(exports,require,module,_filename,_dirname){
		程序员自己写的代码
	})
	
	require()	用于引入一个模块，同一级目录写路径./
	module		指代当前的模块对象
	module.exports		当前模块的导出对象，公开的属性和方法
	exports:指代module.exports
	__filename:当前模块的绝对目录和模块名称
	__dirname:当前模块的绝对目录
	
三.包和npm									
	CommonJS是一种规范，JS向服务器端发展就遵循了这个规范。
	
	包(package)就是一个目录模块，一般是第三方模块
	npm:用于管理包的工具
	切换目录
		cd 完整的路径
		在指定的目录空白区域，按住shift键，单机鼠标右键，选择在此处打开powershell窗口
	使用npm安装(下载)
	npm install 包名
	自动安装到所在目录下的node_modules中
	npm init -y
	初始化一个package.json文件，用于记录安装的包相关信息
	npm install 
	自动安装package.json中记录的包名称以及版本号
	npm官网
	https://www.npmjs.com

四.模块	
1.querystring模块(核心模块)
	查询字符串：浏览器向服务器发请求，传递数据的一种方式
	https://search.jd.com/Search?keyword=手机&enc=utf-8
	parse()	将查询字符串解析为对象
	stringify()	将对象格式化为查询字符串

2.url模块(核心模块)
http://www.tmooc.cn:80	/detail.html?lid=5
parse() 将url解析为对象
    protocol    协议
    hostname    域名/主机名/ip地址
    port        端口号
    pathname    请求的文件路径名称
    query       查询字符串
format()    将对象格式化为url
    注意：query中对应的是对象

3.全局函数
parseInt/parseFloat/isNaN/isFinite/eval...
    1.一次性定时器
    开启
    var timer=setTimeout(回调函数，间隔时间);
    当间隔时间到了，执行一次回调函数，间隔时间单位是毫秒
    清除
    clearTimeout(timer);
    2.周期性定时器
    开启
    var timer=setInterval(回调函数，间隔时间);
    每隔一段时间，执行一次回调函数
    清除
    clearInterval(timer);
    3.立即执行
    开启
    var timer=setImmediate(回调函数);
    放在事件队列中执行，得等待主程序执行完毕
    清除
    clearImmediate(timer);
    4.立即执行
    process.nextTick(回调函数）;
    在主程序的末尾执行

4.fs模块(文件操作)                fs:filesystem   文件系统
    文件包含文件和目录，统称为文件。
	1.查看文件状态
		fs.stat(path,callback)/statSync(path)
		path    文件的路径
		callback    回调函数，用于获取结果
			err     可能产生的错误信息
			stats   具体的文件状态
	2.创建目录
		fs.mkdir(path,callback)/mkdirSync(path)
	3.移除目录
		fs.rmdir(path,callback)/rmdirSync(path)
	4.读取目录
		fs.readdir(path,callback)/readdirSync(path)
			callback
				err 可能产生的错误
				result	读取的结果，格式为数组
	5.创建文件/写入文件
		fs.writeFile(path,data,callback)/writeFileSync(path,data)
			data要写入的数据
			如果文件不存在，会创建文件并写入数据
			如果文件已经存在，会清空文件中内容，然后写入数据
	6.追加写入文件
		fs.appendFile(path,data,callback)/appendFileSync(path,data)
			如果文件不存在，会创建文件并写入数据
			如果文件已经存在，会在文件的末尾写入数据
	7.读取文件
		fs.readFile(path,callback)/readFileSync(path)
			callback
				err
				data	读取的数据，格式为buffer
	8.删除文件
		fs.unlink(path,callback)/unlinkSync(path)
	9.判断文件是否存在
		fs.existsSync(path)
	10.文件流
		var readStream = fs.createReadStream(文件路径)		//创建可读流
		readStream.on('data',function(chunk){})
			当有数据流入，自动触发事件
			通过回调函数来获取，chunk就是获取的数据流
		readStream.on('end',function(){})
			当读取结束，自动触发事件
		var writeStream = fs.createWriteStream('文件名');	//创建可写流
		pipe	管道，可以将数据从可读流添加到可写流
8.同步(sync)和异步
	同步：等待前边的代码执行完才能执行后边代码，会阻止后边代码的执行，通过返回值来获取结果
	异步：不会阻止后边代码执行，后边的操作可以
	先执行，不必等待前边的操作结束，通过回调函数来获取结果
	
五.http协议
	浏览器和web服务器之间的通信协议
	1.通用头信息	General
		Request URL		请求的URL,对应浏览器地址栏；向服务器去获取哪些内容
		Request Method	请求的方法，获取内容的方式	get/post
		Status Code		响应的状态码·
							1**	正在响应，还没有结束
							2**	成功响应
							3**	响应的重定向，跳转到另一个URL
							4**	客户端(浏览器)请求错误
							5**	服务器端错误
		Remote Address	请求的服务器的IP地址及端口号
	
	2.响应头信息 Response Headers
		Connection		响应连接方式，keep-alive 持久连接
		Content-Encoding	响应内容压缩形式，gzip
		Content-Type		响应文件类型
		Location		跳转的URL，常配合状态码3**使用
	
	3.请求头信息	Request Headers
		Accept		浏览器接收的文件类型有哪些
		Accept-Encoding	接收的压缩形式有哪些
		User-Agent	客户端使用的浏览器版本
		
	4.请求主体
		可有可无，浏览器向服务器发请求传递的数据

六.http模块
    模拟浏览器向web服务器发请求，还可以创建web服务器
    1.模拟浏览器
	http.get(url,callback)	发送请求
		url	请求的URL
		callback	回调函数，获取服务器端的响应
			res	响应的对象
			res.statusCode	获取响应的状态码
			res.on('data',function(chunk){ })
				事件：监听服务器端是否有数据传输过来
				chunk	就是传输的数据，格式为buffer
	2.创建web服务器
	var app = http.createServer();	创建web服务器
	app.listen(8080);	设置监听的端口
	//监听浏览器的请求
	app.on('request',function(req,res){
		req	请求的对象
			req.url	请求的url,获取端口号后边的部分
			req.method	请求的方法
			req.headers	请求的头信息
		res	响应的对象
			res.write()	设置响应的内容
			res.writeHead(状态码，头信息对象)
			res.end()	结束并发送响应到浏览器
	})
	
七.使用zlib模块对服务器端响应压缩
	3.1	引入zlib模块
	const zlib=require('zlib');
	3.2	设置内容的压缩形式
	'content-Encoding':'gzip'
	3.3	创建压缩
	var gzip = zlib.createGzip();
	3.4	使用读取流读取文件并响应到浏览器
	fs.createReadStream('tmooc.html').pipe(gzip).pipe(res)

八.express
	基于nodejs平台，快速、开放、极简的web开发框架
	www.expressjs.com.cn	中文官网
	安装express
		npm install express
	创建web服务器
	const express = require('express');		//引入express模块
	var app = express();		//创建web服务器
	app.listen(8080);			//监听端口
	
	1.路由
	浏览器向web服务器发请求，web服务器根据请求的url和请求的方法作出响应。
	三要素：请求的url，请求的方法，响应(回调函数)
		res	响应的对象
			send()	设置并发送响应的内容，路由中只能使用一次
			sendFile()	响应文件，要求使用绝对路径	 _dirname
			redirect()	响应的重定向，跳转到另一个url
		req 请求的对象
			method	请求的方法 	url	请求的url	headers	请求的头信息
			query	获取请求的查询字符串形式的数据，格式为对象
			params	获取路由传递的数据
			
			浏览器传递数据
			http://localhost:8080/shopping/4999
			设置路由中接收数据的名称
			app.get('/shopping/:price',function(req,res){
				req.params		//获取传递的数据，格式为对象
			});
	2.获取get请求的数据
		get请求传递的数据是查询字符串
		app.get('/mylogin',function(req,res){
			//获取get请求数据
			console.log(req.query);
		})
			
	获取post请求的数据
		app.post('/mylogin',function(req,res){
			//获取post请求数据
			//事件：
			req.on('data',function(mydata){
				//buffer数据->查询字符串
				var str =mydata.toString();
				//把查询字符串转为对象
				var obj = querystring.parse(str);
				console.log(obj);
			})
			res.send('登录成功');
		})
			
	get和post请求
	在浏览器地址栏直接输入url,默认是get请求，传递数据使用查询字符串，浏览记录可能被浏览器缓存
	post请求需要使用表单提交来完成(现阶段)，获取数据使用事件
		
	3.路由器
		路由在使用的过程中，不同模块下的路由可能出现相同的url;
		把同一个模块下的路由放在特定的路由器
		
		商品模块	product
		列表					删除						修改
		/product/list		/product/delete			/product/update
		商品模块	user
		列表					删除						修改
		/user/list			/user/delete			/user/update
		
		1.创建路由器
		//用户路由器
		//用户下的所有路由都放在这里
		const express = require('express');
		//创建路由器对象
		var router = express.Router();
		//往路由器中添加路由
		//get	list
		router.get('/list',function(req,res){
			res.send('这是用户列表');
		});
		//路由器最终要交给web服务器使用,导出路由器对象
		module.exports=router;
		
		2.在web服务器中使用
		const express = require('express');
		//引入路由器模块
		const userRouter = require('./user.js')
		var app = express();
		app.listen(8080);
		//路由
		//使用路由器,把用户下的所有路由挂载到/user下
		//挂载:在url的前边添加 /user
		//  /user/list	/user/delete
		//参数1：挂载的url
		//参数2：挂载的路由器
		//路由级中间件使用
		app.use('/user',userRouter);

九.中间件
	为主要的业务逻辑服务；接收到请求，以及做出响应
	应用级中间件，路由级中间件，内置中间件，第三方中间件，错误处理中间件
		1.路由级中间件
		路由器的使用
		
		
	
